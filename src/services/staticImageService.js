// Servicio para cargar im√°genes est√°ticas desde Vercel usando √≠ndice din√°mico
class StaticImageService {
  constructor() {
    this.baseImagePath = '/generated-images';
    this.indexUrl = '/generated-images/images-index.json';
    this.indexCache = null;
    this.lastIndexUpdate = null;
    this.cacheExpiry = 5 * 60 * 1000; // 5 minutos
  }

  // Cargar el √≠ndice de im√°genes din√°micamente
  async loadImagesIndex() {
    try {
      // Usar cach√© si est√° disponible y no ha expirado
      if (this.indexCache && this.lastIndexUpdate && 
          (Date.now() - this.lastIndexUpdate < this.cacheExpiry)) {
        return this.indexCache;
      }

      console.log('üîÑ Cargando √≠ndice de im√°genes...');
      const response = await fetch(this.indexUrl);
      
      if (!response.ok) {
        throw new Error(`Error cargando √≠ndice: ${response.status}`);
      }
      
      const index = await response.json();
      this.indexCache = index;
      this.lastIndexUpdate = Date.now();
      
      console.log('‚úÖ √çndice de im√°genes cargado:', Object.keys(index.images).length, 'd√≠as disponibles');
      return index;
      
    } catch (error) {
      console.warn('‚ö†Ô∏è Error cargando √≠ndice de im√°genes:', error);
      // Fallback: devolver estructura vac√≠a
      return {
        lastUpdated: new Date().toISOString(),
        images: {},
        daysByMonth: {}
      };
    }
  }

  // Intentar cargar una imagen para una fecha espec√≠fica
  async getImageForDate(dateKey) {
    console.log(`üîç Buscando imagen para el d√≠a: ${dateKey}`);
    
    try {
      const index = await this.loadImagesIndex();
      const dayImages = index.images[dateKey];
      
      if (!dayImages || dayImages.length === 0) {
        console.log(`üì≠ No hay im√°genes disponibles para: ${dateKey}, usando fallback`);
        return this.getFallbackImage();
      }
      
      // Tomar la primera imagen disponible para el d√≠a
      const imageInfo = dayImages[0];
      
      // Verificar que la imagen realmente existe
      if (await this.imageExists(imageInfo.url)) {
        console.log(`‚úÖ Imagen est√°tica encontrada: ${imageInfo.url}`);
        return {
          url: imageInfo.url,
          fileName: imageInfo.fileName,
          dateKey: imageInfo.dateKey,
          theme: imageInfo.theme,
          timestamp: imageInfo.timestamp,
          source: 'static'
        };
      } else {
        console.log(`‚ùå Imagen en √≠ndice no existe f√≠sicamente: ${imageInfo.url}, usando fallback`);
        return this.getFallbackImage();
      }
      
    } catch (error) {
      console.error('‚ùå Error buscando imagen est√°tica para:', dateKey, error);
      console.log('üê∞ Usando imagen de fallback');
      return this.getFallbackImage();
    }
  }

  // Obtener imagen de fallback (conejo)
  getFallbackImage() {
    return {
      url: '/conejoprueba.png',
      fileName: 'conejoprueba.png',
      dateKey: 'fallback',
      theme: 'Conejo de prueba',
      prompt: 'Imagen de fallback del conejo',
      timestamp: 0,
      source: 'fallback',
      lastModified: new Date().toISOString()
    };
  }

  // Verificar si una imagen existe
  async imageExists(url) {
    try {
      const response = await fetch(url, { method: 'HEAD' });
      return response.ok;
    } catch {
      return false;
    }
  }

  // Obtener todas las im√°genes disponibles del √≠ndice
  async getAllKnownImages() {
    try {
      const index = await this.loadImagesIndex();
      const allImages = [];
      
      // Convertir el objeto de im√°genes a un array plano
      for (const [, dayImages] of Object.entries(index.images)) {
        for (const imageInfo of dayImages) {
          allImages.push({
            ...imageInfo,
            source: 'static'
          });
        }
      }
      
      // Ordenar por fecha (m√°s recientes primero)
      allImages.sort((a, b) => new Date(b.dateKey) - new Date(a.dateKey));
      
      console.log(`üìã ${allImages.length} im√°genes disponibles en total`);
      return allImages;
      
    } catch (error) {
      console.error('‚ùå Error obteniendo todas las im√°genes:', error);
      return [];
    }
  }

  // Obtener d√≠as disponibles para un mes espec√≠fico
  async getDaysForMonth(yearMonth) {
    try {
      const index = await this.loadImagesIndex();
      return index.daysByMonth[yearMonth] || [];
    } catch (error) {
      console.error('‚ùå Error obteniendo d√≠as del mes:', yearMonth, error);
      return [];
    }
  }

  // Invalidar cach√© (√∫til para desarrollo)
  invalidateCache() {
    this.indexCache = null;
    this.lastIndexUpdate = null;
    console.log('üóëÔ∏è Cach√© de √≠ndice invalidado');
  }
}

export default new StaticImageService();